tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.5/types.yaml
  - plugin:cloudify-azure-plugin
  - plugin:cloudify-utilities-plugin

inputs:

  image:
    default:
      publisher: OpenLogic
      offer: CentOS
      sku: '7-CI'
      version: latest

  size:
    default: Standard_A0

  resource_prefix:
    default: haproxy

  resource_suffix:
    default: '1'

  retry_after:
    type: integer
    default: 60

  location:
    default: { get_secret: azure_location }

  agent_user:
    description: The user name of the agent on the instance created from the image.
    default: centos

  agent_key_public:
    default: { get_secret: agent_key_public }

  agent_key_private:
    default: { get_secret: agent_key_private }

  ssh_public_keys:
    description: the public key
    default:
    - path: {concat:[ '/home/', { get_input: agent_user }, '/.ssh/authorized_keys' ]}
      keyData: { get_input: agent_key_public }

  manager_network:
    default: external

  network_deployment_name:
    default: azure-example-network

  use_existing_network_deployment:
    default: true

  application_ip:
    type: string

  application_port:
    default: 3306

  backend:
    default:
      address: { get_input: application_ip }
      port: { get_input: application_port }
      maxconn: 32

  manager_network:
    default: external

dsl_definitions:

  azure_config: &azure_config
    subscription_id: { get_secret: azure_subscription_id }
    tenant_id: { get_secret: azure_tenant_id }
    client_id: { get_secret: azure_client_id }
    client_secret: { get_secret: azure_client_secret }

node_templates:

  haproxy_configuration_updater:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/haproxy/update.py
          inputs:
            action: add
            frontend_port: { get_input: application_port }
            update_backends:
              server1: { get_input: backend }
        update:
          implementation: scripts/haproxy/update.py
        delete:
          implementation: scripts/haproxy/update.py
          inputs:
            action: remove
            frontend_port: { get_input: application_port }
            update_backends:
              manager: { get_input: backend }
    relationships:
    - type: cloudify.relationships.contained_in
      target: host
    - type: cloudify.relationships.depends_on
      target: haproxy_requirements

  haproxy_requirements:
    type: cloudify.azure.nodes.compute.VirtualMachineExtension
    properties:
      name: {concat:[{get_input: resource_prefix},vmext,{get_input: resource_suffix}]}
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: *azure_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            resource_config:
              publisher: Microsoft.Azure.Extensions
              type: CustomScript
              typeHandlerVersion: '2.0'
              autoUpgradeMinorVersion: true
              settings:
                commandToExecute:
                  concat:
                  - |
                    yum -t -y install haproxy
                  - |
                    cat <<EOT >> /etc/haproxy/haproxy.cfg.template
                    global
                        log 127.0.0.1 local0 notice
                        user haproxy
                        group haproxy
                    defaults
                        log global
                        retries 2
                        timeout connect 3000
                        timeout server 5000
                        timeout client 5000
                    listen stats 0.0.0.0:9000
                        mode http
                        balance
                        timeout client 5000
                        timeout connect 4000
                        timeout server 30000
                        stats uri /haproxy_stats
                        stats realm HAProxy\ Statistics
                        stats auth admin:password
                        stats admin if TRUE
                    frontend {{frontend_id}}
                        option forceclose
                        bind *:{{frontend_port}}
                        default_backend {{default_backend}}
                    backend {{default_backend}}
                        option forceclose
                    {% for id, backend in backends.iteritems() %}    server {{ id }} {{ backend.address }}:{{ backend.port }} maxconn {{ backend.maxconn }}
                    {% endfor %}
                    EOT
                  - |
                    chown root:root /etc/haproxy/haproxy.cfg.template
                  - |
                    chmod 0777 /etc/haproxy/haproxy.cfg.template
                  - |
                    setsebool -P haproxy_connect_any=1
                  - |
                    systemctl enable haproxy
                  - |
                    systemctl start haproxy
        start: scripts/cloud_config_completion/azure.py
    relationships:
    - type: cloudify.azure.relationships.vmx_contained_in_vm
      target: host

  host:
    type: cloudify.azure.nodes.compute.VirtualMachine
    properties:
      name: {concat:[{get_input: resource_prefix},vm,{get_input: resource_suffix}]}
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      os_family: linux
      azure_config: *azure_config
      resource_config:
        hardwareProfile:
          vmSize: { get_input: size }
        storageProfile:
          imageReference: { get_input: image}
        osProfile:
          adminUsername: { get_input: agent_user }
          adminPassword: ''
          linuxConfiguration:
            ssh:
              publicKeys: { get_input: ssh_public_keys }
            disablePasswordAuthentication: true
      agent_config:
        network: { get_input: manager_network }
        install_method: init_script
        user: { get_input: agent_user }
        port: 22
        key: { get_input: agent_key_private }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.connected_to_storage_account
      target: storage_account
    - type: cloudify.azure.relationships.connected_to_availability_set
      target: availability_set
    - type: cloudify.azure.relationships.connected_to_nic
      target: host_nic

  host_nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      name: {concat:[{get_input: resource_prefix},nic,{get_input: resource_suffix}]}
      location: { get_secret: azure_location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.nic_connected_to_network_security_group
      target: network_security_group
    - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
      target: host_nic_ip_cfg

  host_nic_ip_cfg:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      name: {concat:[{get_input: resource_prefix},ip,{get_input: resource_suffix}]}
      location: { get_secret: azure_location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
    relationships:
    - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
      target: subnet
    - type: cloudify.azure.relationships.ip_configuration_connected_to_public_ip
      target: ip
    - type: cloudify.relationships.contained_in
      target: azure

  network_security_group:
    type: cloudify.azure.nodes.network.NetworkSecurityGroup
    properties:
      name: {concat:[{get_input: resource_prefix},nsg,{get_input: resource_suffix}]}
      location: { get_secret: azure_location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        securityRules:
        - name: http
          properties:
            description: HTTP access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 80
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 101
            access: Allow
            direction: Inbound
        - name: HADashboard
          properties:
            description: haproxy dashboard access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 8080
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 102
            access: Allow
            direction: Inbound
        - name: BACKEND
          properties:
            description: Backend Port access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: { get_input: application_port }
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 103
            access: Allow
            direction: Inbound
        - name: HAMetrics
          properties:
            description: METRICS access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 9000
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 104
            access: Allow
            direction: Inbound
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  ip:
    type: cloudify.azure.nodes.network.PublicIPAddress
    properties:
      name: {concat:[{get_input: resource_prefix},pubip,{get_input: resource_suffix}]}
      location: { get_secret: azure_location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        publicIPAllocationMethod: Static
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  availability_set:
    type: cloudify.azure.nodes.compute.AvailabilitySet
    properties:
      name: {concat:[{get_input: resource_prefix},availset,{get_input: resource_suffix}]}
      location: { get_secret: azure_location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  storage_account:
    type: cloudify.azure.nodes.storage.StorageAccount
    properties:
      name: {concat:[{get_input: resource_prefix},sa,{get_input: resource_suffix}]}
      location: { get_secret: azure_location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        accountType: Standard_LRS
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  subnet:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      resource_group_name: { get_attribute: [ azure, deployment, outputs, resource_group ] }
      name: { get_attribute: [ azure, deployment, outputs, public_subnet ] }
      azure_config: *azure_config
      use_external_resource: true
      location: { get_attribute: [ azure, deployment, outputs, location ] }
    relationships:
    - type: cloudify.azure.relationships.contained_in_virtual_network
      target: virtual_network

  virtual_network:
    type: cloudify.azure.nodes.network.VirtualNetwork
    properties:
      resource_group_name: { get_attribute: [ azure, deployment, outputs, resource_group ] }
      name: { get_attribute: [ azure, deployment, outputs, virtual_network ] }
      azure_config: *azure_config
      use_external_resource: true
      location: { get_attribute: [ azure, deployment, outputs, location ] }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  resource_group:
    type: cloudify.azure.nodes.ResourceGroup
    properties:
      name: { get_attribute: [ azure, deployment, outputs, resource_group ] }
      use_external_resource: true
      location: { get_attribute: [ azure, deployment, outputs, location ] }
      azure_config: *azure_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: azure

  azure:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: { get_input: network_deployment_name }
          blueprint_archive: https://github.com/cloudify-examples/azure-example-network/archive/master.zip
          main_file_name: simple-blueprint.yaml
          external_resource: { get_input: use_existing_network_deployment }
        deployment:
          id: { get_input: network_deployment_name }
          outputs:
            resource_group: resource_group
            virtual_network: virtual_network
            public_subnet: public_subnet
            location: location
          external_resource: { get_input: use_existing_network_deployment }
        reexecute: false

outputs:

  ip:
    description: Public IP Address
    value: { get_attribute: [ host, public_ip ] }
