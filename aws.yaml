tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3/types.yaml
  - plugin:cloudify-awssdk-plugin
  - plugin:cloudify-utilities-plugin
  - imports/cloud-config.yaml

inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Centos 7.0 image.
    default: { get_attribute: [ centos_core_ami, aws_resource_id ] }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.micro

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: centos

  agent_key_private:
    description: >
      The content of the agent's private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: >
      The content of the agent's public key.
    default: { get_secret: agent_key_public }

  manager_network:
    default: external

  network_deployment_name:
    default: aws-example-network

  use_existing_network_deployment:
    default: true

  application_ip:
    type: string

  application_port:
    default: 3306

  backend:
    default:
      address: { get_input: application_ip }
      port: { get_input: application_port }
      maxconn: 32

  centos_image_name_filter:
    default: 'CentOS 7.6.1810 x86_64 with cloud-init (HVM)'

dsl_definitions:

  aws_config: &aws_config
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    ec2_region_name: { get_attribute: [ aws, deployment, outputs, ec2_region_name ] }
    ec2_region_endpoint: { get_attribute: [ aws, deployment, outputs, ec2_region_endpoint ] }

  client_config: &client_config
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    region_name: { get_attribute: [ aws, deployment, outputs, ec2_region_name ] }

node_templates:

  haproxy_configuration_updater:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/haproxy/update.py
          inputs:
            action: add
            frontend_port: { get_input: application_port }
            update_backends:
              server1: { get_input: backend }
        update:
          implementation: scripts/haproxy/update.py
        delete:
          implementation: scripts/haproxy/update.py
          inputs:
            action: remove
            frontend_port: { get_input: application_port }
            update_backends:
              manager: { get_input: backend }
    relationships:
    - type: cloudify.relationships.contained_in
      target: host
    - type: cloudify.relationships.depends_on
      target: cloud_config_completion

  host:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      use_public_ip: true
      agent_config:
        network: { get_input: manager_network }
        install_method: init_script
        user: { get_input: agent_user }
        key: { get_secret: agent_key_private }
      resource_config:
        MaxCount: 1
        MinCount: 1
        ImageId: { get_input: ami }
        InstanceType: { get_input: instance_type }
        kwargs:
          BlockDeviceMappings:
          - DeviceName: '/dev/sda1'
            Ebs:
              DeleteOnTermination: True
          Placement:
            AvailabilityZone: { get_attribute: [ aws, deployment, outputs, availability_zone ] }
          UserData: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: nic
      - type: cloudify.relationships.depends_on
        target: ip
      - type: cloudify.relationships.depends_on
        target: security_group_rules
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config
      - type: cloudify.relationships.depends_on
        target: centos_core_ami

  centos_core_ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      resource_config:
        kwargs:
          Filters:
          - Name: name
            Values:
            - { get_input: centos_image_name_filter }
          - Name: owner-id
            Values:
            - '057448758665'
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: aws

  ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        kwargs:
          Domain: 'vpc'
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: nic
    - type: cloudify.relationships.contained_in
      target: aws

  nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Description: Created by haproxy-blueprint aws-blueprint.yaml.
          SubnetId: { get_attribute: [ public_subnet, aws_resource_id] }
          Groups:
          - { get_attribute: [ security_group, aws_resource_id ] }
    relationships:
    - type: cloudify.relationships.depends_on
      target: public_subnet
    - type: cloudify.relationships.depends_on
      target: security_group
    - type: cloudify.relationships.contained_in
      target: aws
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config: { get_property: [ SELF, resource_config, kwargs] }

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          IpPermissions:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            IpRanges:
            - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            IpRanges:
            - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: { get_input: application_port }
            ToPort: { get_input: application_port }
            IpRanges:
            - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 9000
            ToPort: 9000
            IpRanges:
            - CidrIp: 0.0.0.0/0
    relationships:
    - type: cloudify.relationships.contained_in
      target: security_group

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        kwargs:
          GroupName: HaproxyExampleSecurityGroup
          Description: Created by haproxy-blueprint aws-blueprint.yaml.
          VpcId: { get_attribute: [ vpc, aws_resource_id] }
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc
    - type: cloudify.relationships.contained_in
      target: aws
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config: { get_property: [ SELF, resource_config, kwargs] }

  public_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_config:
        kwargs:
          CidrBlock: 'N/A'
          AvailabilityZone: 'N/A'
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            aws_resource_id: { get_attribute: [ aws, deployment, outputs, public_subnet_id ] }
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc
    - type: cloudify.relationships.contained_in
      target: aws

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *client_config
      use_external_resource: true
      # resource_id: { get_attribute: [ aws, deployment, outputs, vpc_id ] }
      resource_config:
        kwargs:
          CidrBlock: 'N/A'
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            aws_resource_id: { get_attribute: [ aws, deployment, outputs, vpc_id ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: aws

  aws:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: { get_input: network_deployment_name }
          blueprint_archive: https://github.com/cloudify-examples/aws-example-network/archive/master.zip
          main_file_name: simple-blueprint.yaml
          external_resource: { get_input: use_existing_network_deployment }
        deployment:
          id: { get_input: network_deployment_name }
          outputs:
            vpc_id: vpc_id
            public_subnet_id: public_subnet_id
            private_subnet_id: private_subnet_id
            ec2_region_name: ec2_region_name
            ec2_region_endpoint: ec2_region_endpoint
            availability_zone: availability_zone
          external_resource: { get_input: use_existing_network_deployment }
        reexecute: false

outputs:

  ip:
    description: Public IP Address
    value: { get_attribute: [ ip, aws_resource_id ] }
